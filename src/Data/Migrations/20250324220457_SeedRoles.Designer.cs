// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using light_quiz_api.Data;

#nullable disable

namespace light_quiz_api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250324220457_SeedRoles")]
    partial class SeedRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasAlternateKey("Email")
                        .HasName("ak_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("InvitationId")
                        .HasColumnType("uuid")
                        .HasColumnName("invitation_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.GroupMember", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_user_id");

                    b.HasKey("GroupId", "MemberId")
                        .HasName("pk_group_members");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_group_members_app_user_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_group_members_member_id");

                    b.ToTable("group_members", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("InviteeEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("invitee_email");

                    b.Property<Guid>("InviterId")
                        .HasColumnType("uuid")
                        .HasColumnName("inviter_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_invitations");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_invitations_group_id");

                    b.HasIndex("InviteeEmail")
                        .HasDatabaseName("ix_invitations_invitee_email");

                    b.HasIndex("InviterId")
                        .HasDatabaseName("ix_invitations_inviter_id");

                    b.ToTable("invitations", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("correct_answer");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("question_text");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("question_type_id");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("QuestionTypeId")
                        .HasDatabaseName("ix_questions_question_type_id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_questions_quiz_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<char>("OptionLetter")
                        .HasColumnType("character(1)")
                        .HasColumnName("option_letter");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("option_text");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_question_options");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_options_question_id");

                    b.ToTable("question_options", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_question_types");

                    b.ToTable("question_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Multiple Choice"
                        },
                        new
                        {
                            Id = 2,
                            Name = "True/False"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Short Answer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Text"
                        });
                });

            modelBuilder.Entity("light_quiz_api.Models.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Anonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("anonymous");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_quizzes_created_by");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_quizzes_group_id");

                    b.ToTable("quizzes", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.QuizProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_user_id");

                    b.Property<DateTime>("LastSaved")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_saved");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<long>("RemainingTimeSeconds")
                        .HasColumnType("bigint")
                        .HasColumnName("remaining_time_seconds");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_progresses");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_quiz_progresses_app_user_id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_quiz_progresses_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_quiz_progresses_user_id");

                    b.ToTable("quiz_progresses", (string)null);
                });

            modelBuilder.Entity("light_quiz_api.Models.StudentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnswerOption")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("answer_option");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("answer_text");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_user_id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_student_answers");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_student_answers_app_user_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_student_answers_question_id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_student_answers_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_student_answers_user_id");

                    b.ToTable("student_answers", null, t =>
                        {
                            t.HasCheckConstraint("chk_student_answers_answer_not_null", "answer_option IS NOT NULL OR answer_text IS NOT NULL");
                        });
                });

            modelBuilder.Entity("light_quiz_api.Models.UserResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("app_user_id");

                    b.Property<int>("Grade")
                        .HasColumnType("integer")
                        .HasColumnName("grade");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_results");

                    b.HasIndex("AppUserId")
                        .HasDatabaseName("ix_user_results_app_user_id");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_user_results_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_results_user_id");

                    b.ToTable("user_results", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("light_quiz_api.Models.GroupMember", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany("GroupMemberships")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_group_members_users_app_user_id");

                    b.HasOne("light_quiz_api.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_members_groups_group_id");

                    b.HasOne("light_quiz_api.Models.AppUser", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_members_users_member_id");

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("light_quiz_api.Models.Invitation", b =>
                {
                    b.HasOne("light_quiz_api.Models.Group", "Group")
                        .WithMany("Invitations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_groups_group_id");

                    b.HasOne("light_quiz_api.Models.AppUser", "Invitee")
                        .WithMany("ReceivedInvitations")
                        .HasForeignKey("InviteeEmail")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_users_invitee_email");

                    b.HasOne("light_quiz_api.Models.AppUser", "Inviter")
                        .WithMany("SentInvitations")
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invitations_users_inviter_id");

                    b.Navigation("Group");

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("light_quiz_api.Models.Question", b =>
                {
                    b.HasOne("light_quiz_api.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_question_types_question_type_id");

                    b.HasOne("light_quiz_api.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_quizzes_quiz_id");

                    b.Navigation("QuestionType");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("light_quiz_api.Models.QuestionOption", b =>
                {
                    b.HasOne("light_quiz_api.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_options_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("light_quiz_api.Models.Quiz", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", "CreatedByUser")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_quizzes_users_created_by");

                    b.HasOne("light_quiz_api.Models.Group", "Group")
                        .WithMany("Quizzes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_quizzes_groups_group_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("light_quiz_api.Models.QuizProgress", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany("QuizProgresses")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_quiz_progresses_users_app_user_id");

                    b.HasOne("light_quiz_api.Models.Quiz", "Quiz")
                        .WithMany("QuizProgresses")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_progresses_quizzes_quiz_id");

                    b.HasOne("light_quiz_api.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_progresses_users_user_id");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("light_quiz_api.Models.StudentAnswer", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_student_answers_users_app_user_id");

                    b.HasOne("light_quiz_api.Models.Question", "Question")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_answers_questions_question_id");

                    b.HasOne("light_quiz_api.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_answers_quizzes_quiz_id");

                    b.HasOne("light_quiz_api.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_answers_users_user_id");

                    b.Navigation("Question");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("light_quiz_api.Models.UserResult", b =>
                {
                    b.HasOne("light_quiz_api.Models.AppUser", null)
                        .WithMany("Results")
                        .HasForeignKey("AppUserId")
                        .HasConstraintName("fk_user_results_users_app_user_id");

                    b.HasOne("light_quiz_api.Models.Quiz", "Quiz")
                        .WithMany("UserResults")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_results_quizzes_quiz_id");

                    b.HasOne("light_quiz_api.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_results_users_user_id");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("light_quiz_api.Models.AppUser", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("GroupMemberships");

                    b.Navigation("QuizProgresses");

                    b.Navigation("ReceivedInvitations");

                    b.Navigation("Results");

                    b.Navigation("SentInvitations");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("light_quiz_api.Models.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Invitations");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("light_quiz_api.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("light_quiz_api.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("light_quiz_api.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizProgresses");

                    b.Navigation("UserResults");
                });
#pragma warning restore 612, 618
        }
    }
}
